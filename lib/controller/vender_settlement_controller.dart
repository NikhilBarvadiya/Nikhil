import 'package:flutter/material.dart';import 'package:get/get.dart';class VendorSettlementController extends GetxController {  String vendorSelectedOrder = "Return order";  bool returnOrderFilter = false;  bool codOrderFilter = false;  List selectedOrder = [    {      "selectedOrder": "Return Order",      "isActive": true,    },    {      "selectedOrder": "COD Order",      "isActive": false,    },  ];  List codLocation = [    for (int i = 1; i < 11; i++)      {        "id": "$i Pending to collect COD Location",        "orderNo": "#VND-00608$i",        "place": "Order Placing Time",        "dateTime": "Apr 25, 2022, 4:23:08 PM",      }  ];  List returnLocation =[    for (int i = 1; i < 11; i++)      {        "id": "$i Returned Location",        "orderNo": "#VND-00563$i",        "place": "Order Placing Time",        "dateTime": "Apr 13, 2022, 10:45:47 AM",      }  ];  init() {    returnOrderFilter = false;    codOrderFilter = false;  }  onChange(int i) {    for (int a = 0; a < selectedOrder.length; a++) {      if (a == i) {        selectedOrder[a]["isActive"] = true;        vendorSelectedOrder = selectedOrder[a]["selectedOrder"];      } else {        selectedOrder[a]["isActive"] = false;      }    }    update();  }  /// Return order ///  onDatePickerReturn() async {    returnOrderFilter = true;    update();    await dateVendorTimeRangePicker(Get.context!);  }  String startDateReturnOrder = "";  String endDateReturnOrder = "";  dateVendorTimeRangePicker(BuildContext context) async {    DateTimeRange? picked = await showDateRangePicker(      context: context,      firstDate: DateTime.now().subtract(const Duration(days: 90)),      lastDate: DateTime.now(),      helpText: 'Select a Date or Date-Range',      initialDateRange: DateTimeRange(        end: DateTime.now(),        start: DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day - 1),      ),    );    if (picked != null) {      startDateReturnOrder = picked.start.toIso8601String();      endDateReturnOrder = picked.end.toIso8601String();      update();    }  }  /// COD order ///  onDatePickerCod() async {    codOrderFilter = true;    update();    await dateDodTimeRangePicker(Get.context!);  }  String startDateCodOrder = "";  String endDateCodOrder = "";  dateDodTimeRangePicker(BuildContext context) async {    DateTimeRange? picked = await showDateRangePicker(      context: context,      firstDate: DateTime.now().subtract(const Duration(days: 90)),      lastDate: DateTime.now(),      helpText: 'Select a Date or Date-Range',      initialDateRange: DateTimeRange(        end: DateTime.now(),        start: DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day - 1),      ),    );    if (picked != null) {      startDateCodOrder = picked.start.toIso8601String();      endDateCodOrder = picked.end.toIso8601String();      update();    }  }}