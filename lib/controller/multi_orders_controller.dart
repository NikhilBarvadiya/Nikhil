// ignore_for_file: equal_keys_in_map, avoid_print// ignore_for_file: must_call_super, prefer_typing_uninitialized_variables, empty_catchesimport 'package:flutter/material.dart';import 'package:fw_manager/common/config.dart';import 'package:fw_manager/core/configuration/app_routes.dart';import 'package:fw_manager/core/theme/index.dart';import 'package:fw_manager/networking/index.dart';import 'package:get/get.dart';class MultiOrdersController extends GetxController {  TextEditingController shortNumberController = TextEditingController();  bool isOpenTap = false;  bool isOpenOrder = false;  bool isPolyline = false;  List selectedOrderTrueList = [];  String selectedOrder = "B2B Order";  List order = [    {      "order": "B2B Order",      "isActive": true,    },    {      "order": "B2C Order",      "isActive": false,    },  ];  @override  void onInit() {    fatchbusinessCategories();    fatchArea("");    _autoSelector();    isBusinessSelected = "";    isVendorsSelectedId = "";    isAreaSelected = "";    isRouteSelectedId = "";    super.onInit();  }  onShortNumberUpdate(int index) {    selectedOrderTrueList[index]['addressId']['shortNo'] = shortNumberController.text.toString();    update();    Get.back();  }  onChange(int i) {    for (int a = 0; a < order.length; a++) {      if (a == i) {        order[a]["isActive"] = true;        selectedOrder = order[a]["order"];      } else {        order[a]["isActive"] = false;      }    }    update();  }  onOpenTap() {    isBusinessSelected = "";    isVendorsSelectedId = "";    isAreaSelected = "";    isRouteSelectedId = "";    isOpenTap = !isOpenTap;    _autoSelector();    update();  }  onOpenOrder() async{    if (isRouteSelectedId != "" && isBusinessSelected != "" && isAreaSelected != "") {      isOpenOrder = true;      await fatchVendorOrders();      _autoSelector();    }else{      isOpenOrder = false;    }  }  toggleOpenOrder(){    isOpenOrder = !isOpenOrder;    update();  }  onRouteSelected(String name, String id) async {    isRouteSelected = name;    isRouteSelectedId = id;    if (isRouteSelectedId != "" && isAreaSelected != "") {      Get.back();      onOpenOrder();    }else{      Get.snackbar(        "Error",        "Please try again ?",        backgroundColor: Colors.white,        colorText: Colors.black,      );      Get.back();    }    update();  }  onBusinessSelected(String id, String name) async {    isBusinessSelectedId = id;    isBusinessSelected = name;    isVendorsSelectedId = "";    isAreaSelected = "";    isRouteSelectedId = "";    fatchVendor("");    print(isBusinessSelected);    if (isBusinessSelected != "") {      onOpenOrder();      Get.back();    }else{      Get.snackbar(        "Error",        "Please try again ?",        backgroundColor: Colors.white,        colorText: Colors.black,      );    }    update();  }  onVendorsSelected(String name, String id) async {    isVendorsSelected = name;    isAreaSelected = "";    isRouteSelectedId = "";    if (isBusinessSelected != "") {      isVendorsSelectedId = id;      Get.back();      onOpenOrder();    }else{      Get.snackbar(        "Error",        "Please select business categories ?",        backgroundColor: Colors.white,        colorText: Colors.black,      );    }    update();  }  onAreaSelected(String id, String name) async {    isAreaSelected = name;    isAreaSelectedId = id;    isRouteSelectedId = "";    fatchArea("");    fatchRoute("");    if (isAreaSelected != "") {      Get.back();      onOpenOrder();    }else{      Get.snackbar(        "Error",        "Please try again ?",        backgroundColor: Colors.white,        colorText: Colors.black,      );    }    update();  }  onSelectedLocation() {    Get.toNamed(AppRoutes.selectedLocation);    update();  }  onMerge() {    Get.toNamed(AppRoutes.merge);    update();  }  onMap() {    Get.toNamed(AppRoutes.mapView);    update();  }  onPolyline() {    isPolyline = !isPolyline;    update();  }  List businessCategories = [];  String isBusinessSelected = "";  String isBusinessSelectedId = "";  int i = 0;  fatchbusinessCategories() async {    try {      var resData = await apis.call(apiMethods.businessCategories, {}, ApiType.post);      businessCategories = resData.data;      businessCategories.map((element) {        if (element['_id'] == isBusinessSelectedId) {          isBusinessSelected = element['title'];        }      });      print("isBusinessSelectedId===>$isBusinessSelectedId");      print("isBusinessSelected===>$isBusinessSelected");    } catch (e) {}    update();  }  List getVendorsList = [];  String isVendorsSelected = "";  String isVendorsSelectedId = "";  fatchVendor(String search) async {    try {      var resData = await apis.call(        apiMethods.getVendors,        {          "businessCategoryId": isBusinessSelectedId,          "search": search,        },        ApiType.post,      );      if (resData.isSuccess == true && resData.data != 0) {        getVendorsList = resData.data;      }      return getVendorsList;    } catch (e) {}    update();  }  List areaList = [];  String isAreaSelected = "";  String isAreaSelectedId = "";  fatchArea(String search) async {    try {      var resData = await apis.call(        apiMethods.area,        {          "search": search,        },        ApiType.post,      );      areaList = resData.data;      areaList.map((element) {        if (element['_id'] == isAreaSelectedId) {          isAreaSelected = element['name'];        }      });      print("isAreaSelectedId===>$isAreaSelectedId");    } catch (e) {}    update();  }  List routeList = [];  String isRouteSelected = "";  String isRouteSelectedId = "";  fatchRoute(String search) async {    try {      var resData = await apis.call(        apiMethods.route,        {          "areaId": isAreaSelectedId,          "search": search,        },        ApiType.post,      );      if (resData.isSuccess == true && resData.data != 0) {        routeList = resData.data;      }      return routeList;    } catch (e) {}    update();  }  List vendorOrdersList = [];  String isVendorSelected = "";  String isVendorSelectedId = "";  fatchVendorOrders() async {    try {      var resData = await apis.call(        apiMethods.vendorOrders,        {          "orderType": isBusinessSelectedId,          "routeId": isRouteSelected,          "status": "pending",          "orderType": "b2b",        },        ApiType.post,      );      if (resData.isSuccess == true && resData.data != 0) {        vendorOrdersList = resData.data;      }      return vendorOrdersList;    } catch (e) {}    update();  }  addToSelectedList(item) {    if (item != null) {      var index = selectedOrderTrueList.indexOf(item);      if (index == -1) {        selectedOrderTrueList.add(item);      }      _autoSelector();    }  }  removeToSelectedList(item) {    if (item != null) {      Get.dialog(        AlertDialog(          title: Text(            'Remove',            style: AppCss.h1,          ),          content: Text(            'Do you remove this location?',            style: AppCss.h3,          ),          actions: [            TextButton(              child: const Text("Ok"),              onPressed: () {                selectedOrderTrueList.remove(item);                _autoSelector();                Get.back();              },            ),            TextButton(              child: const Text("Close"),              onPressed: () => Get.back(),            ),          ],        ),      );    }  }  _autoSelector() {    for (int i = 0; i < vendorOrdersList.length; i++) {      int finder = 0;      for (int j = 0; j < selectedOrderTrueList.length; j++) {        if (vendorOrdersList[i]['_id'] == selectedOrderTrueList[j]['_id']) {          vendorOrdersList[i]['selected'] = true;          finder++;        }      }      if (finder == 0) {        vendorOrdersList[i]['selected'] = false;      }    }    update();  }}