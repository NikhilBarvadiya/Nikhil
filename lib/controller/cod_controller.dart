// ignore_for_file: deprecated_member_use, must_call_superimport 'package:flutter/material.dart';import 'package:get/get.dart';class CodSettlementController extends GetxController{  String selectedCod = "By Vendor";  bool vendorFilter = false;  bool driverFilter = false;  bool personNameSelect = false;  bool driverNameSelect = false;  List codList = [    {      "cod": "By Vendor",      "isActive": true,    },    {      "cod": "By Drivers",      "isActive": false,    }  ];  List vendorList = [    for (int i = 1; i < 11; i++)      {        "orderNo": "#VND-00665$i",        "personName": "Abcagency@gmail.com",        "dateTime": "May 9, 2022 11:17 AM",        "status": " running",        "codAmount": " ₹1,30$i.4$i",        "collectedAmount": " ₹0.00",        "diffAmount": " ₹1,30$i.4$i",        "allottedDrivers": " $i Drivers",      }  ];  List vendorNameList = [    for (int i = 1; i < 6; i++)      {        "personName": "Abcagency@gmail.com $i",        "collectedAmount": "₹10${i}0",      }  ];  List driverList = [    for (int i = 1; i < 11; i++)      {        "orderNo": "#ORD-00481$i",        "dateTime": "May 30, 2022 11:19 AM",        "codAmount": "₹57$i.00",        "collectedAmount": "₹0.00",        "diffAmount": "₹57$i.00",        "location": "$i Vendor",      }  ];  @override  void onInit() {    vendorFilter = false;    driverFilter = false;  }  onChange(int i) {    for (int a = 0; a < codList.length; a++) {      if (a == i) {        codList[a]["isActive"] = true;        selectedCod = codList[a]["cod"];      } else {        codList[a]["isActive"] = false;      }    }    update();  }  /// By vendor ///  onDatePickerVendor() async {    vendorFilter = true;    update();    await dateVendorTimeRangePicker(Get.context!);  }  String startDateVendor = "";  String endDateVendor = "";  dateVendorTimeRangePicker(BuildContext context) async {    DateTimeRange? picked = await showDateRangePicker(      context: context,      firstDate: DateTime.now().subtract(const Duration(days: 90)),      lastDate: DateTime.now(),      helpText: 'Select a Date or Date-Range',      initialDateRange: DateTimeRange(        end: DateTime.now(),        start: DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day - 1),      ),    );    if (picked != null) {      startDateVendor = picked.start.toIso8601String();      endDateVendor = picked.end.toIso8601String();      update();    }  }  /// By driver ///  onDatePickerDriver() async {    driverFilter = true;    update();    await dateDodTimeRangePicker(Get.context!);  }  String startDateDriver = "";  String endDateDriver = "";  dateDodTimeRangePicker(BuildContext context) async {    DateTimeRange? picked = await showDateRangePicker(      context: context,      firstDate: DateTime.now().subtract(const Duration(days: 90)),      lastDate: DateTime.now(),      helpText: 'Select a Date or Date-Range',      initialDateRange: DateTimeRange(        end: DateTime.now(),        start: DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day - 1),      ),    );    if (picked != null) {      startDateDriver = picked.start.toIso8601String();      endDateDriver = picked.end.toIso8601String();      update();    }  }  onPersonNameClick() {    personNameSelect = true;    update();  }  onDriverNameClick() {    driverNameSelect = true;    update();  }  onBackButton() {    startDateDriver = "";    endDateDriver = "";    personNameSelect = false;    driverNameSelect = false;    update();  }}