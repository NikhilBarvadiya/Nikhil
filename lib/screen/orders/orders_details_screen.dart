// ignore_for_file: must_be_immutable, deprecated_member_useimport 'package:flutter/material.dart';import 'package:font_awesome_flutter/font_awesome_flutter.dart';import 'package:fw_manager/controller/common_controller.dart';import 'package:fw_manager/controller/orders_controller.dart';import 'package:fw_manager/core/assets/index.dart';import 'package:fw_manager/core/widgets/common_widgets/pickup_orders_card.dart';import 'package:fw_manager/core/widgets/common_widgets/searchable_list.dart';import 'package:get/get.dart';import 'package:url_launcher/url_launcher.dart';class OrdersDetailsScreen extends StatelessWidget {  OrdersController ordersController = Get.put(OrdersController());  final CommonController _commonController = Get.find();  OrdersDetailsScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    var data = Get.arguments;    return GetBuilder<OrdersController>(      builder: (_) => WillPopScope(        onWillPop: () async {          return ordersController.isSlider;        },        child: Scaffold(          appBar: AppBar(            elevation: 1,            foregroundColor: Colors.white,            title: Text(ordersController.isdragDrop ? data : "Drag and Drop on"),            leading: IconButton(              onPressed: () => ordersController.onBack(),              icon: const Icon(Icons.arrow_back),            ),            actions: [              IconButton(                onPressed: () => ordersController.onMap(),                icon: const Icon(FontAwesomeIcons.mapLocationDot),              ),            ],          ),          body: Column(            children: [              Expanded(                child: ReorderableListView.builder(                  itemCount: ordersController.orderList.length,                  buildDefaultDragHandles: ordersController.isdragDrop ? false : true,                  shrinkWrap: true,                  itemBuilder: (context, index) {                    return PickupOrdersCard(                      key: Key('$index'),                      header: ordersController.orderList[index]["header"],                      time: ordersController.orderList[index]["time"],                      shopName: ordersController.orderList[index]["shopName"],                      personName: ordersController.orderList[index]["personName"],                      callIcon: Icons.call,                      number: ordersController.orderList[index]["number"],                      textClick: () async {                        String link = "tel: 6353017016";                        await launch(link);                      },                      itemClick: () {                        showItemModel(context);                      },                      editClick: () {                        ordersController.openEditDialog();                      },                      address: ordersController.orderList[index]["address"],                      otp: ordersController.orderList[index]["otp"],                      note: "Notes: "+ordersController.orderList[index]["note"],                      status: ordersController.orderList[index]["status"],                      dateTime: ordersController.orderList[index]["dateTime"],                      amount: ordersController.orderList[index]["amount"],                      amount1: ordersController.orderList[index]["amount1"],                      image: imageAssets.logo,                      imagetrap: (){                        showDialog(                            builder: (BuildContext context) => AlertDialog(                              backgroundColor: Colors.transparent,                              insetPadding: const EdgeInsets.all(2),                              title: Container(                                decoration: const BoxDecoration(),                                width: MediaQuery.of(context).size.width,                                child: Expanded(                                  child: Image.asset(imageAssets.logo,),                                ),                              ),                            ),                            context: context);                      },                      stopList: [                        ...ordersController.orderList.map((e) {                          return e["header"];                        }),                      ],                      shopNameList: [                        ...ordersController.orderList.map((e) {                          return e["shopName"];                        }),                      ],                    );                  },                  onReorder: (int oldIndex, int newIndex) => ordersController.onRecord(oldIndex, newIndex),                ),              ),            ],          ),        ),      ),    );  }  showItemModel(context) {    showModalBottomSheet<void>(      backgroundColor: Colors.transparent,      context: context,      isScrollControlled: true,      enableDrag: false,      builder: (BuildContext context) {        return Container(          margin: EdgeInsets.only(top: _commonController.statusBarHeight),          decoration: const BoxDecoration(            color: Colors.white,            borderRadius: BorderRadius.only(              topLeft: Radius.circular(10),              topRight: Radius.circular(10),            ),          ),          padding: MediaQuery.of(context).viewInsets,          child: SizedBox(            child: SearchableListView(              isLive: false,              isOnSearch: true,              fetchApi: (search) async {},              itemList: const [],              bindText: 'name',              bindValue: '_id',              labelText: 'Item',              hintText: 'Please Select Item',              onSelect: (val, text) {},            ),          ),        );      },    );  }}