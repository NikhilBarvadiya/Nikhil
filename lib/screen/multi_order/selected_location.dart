// ignore_for_file: must_be_immutable, prefer_final_fieldsimport 'package:flutter/material.dart';import 'package:fw_manager/controller/app_controller.dart';import 'package:fw_manager/controller/multi_orders_controller.dart';import 'package:fw_manager/core/theme/index.dart';import 'package:fw_manager/core/widgets/common_widgets/common_button.dart';import 'package:fw_manager/core/widgets/common_widgets/selected_order_address_card.dart';import 'package:get/get.dart';class SelectedLocation extends StatelessWidget {  final multiOrdersController = Get.put(MultiOrdersController());  AppController appController = Get.put(AppController());  SelectedLocation({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    return GetBuilder<MultiOrdersController>(      builder: (_) => Scaffold(        appBar: AppBar(          elevation: 1,          automaticallyImplyLeading: true,          foregroundColor: Colors.white,          title: const Text(            "Selected Location",            style: TextStyle(              fontSize: 20,            ),            textScaleFactor: 1,            textAlign: TextAlign.center,          ),          actions: [            IconButton(              onPressed: () => multiOrdersController.onMap(),              icon: const Icon(Icons.location_pin),            ),          ],        ),        body: Padding(          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),          child: Column(            children: [              TextFormField(                onChanged: (search) {                  multiOrdersController.runFilter(                    search,                    "addressHeder",                  );                },                decoration: InputDecoration(                  fillColor: Colors.grey[200],                  labelText: 'Search',                  hintText: 'Enter Order location',                  suffixIcon: SizedBox(                    height: 50,                    width: 50,                    child: Icon(                      Icons.search,                      color: Theme.of(context).primaryColor,                    ),                  ),                  hintStyle: const TextStyle(fontSize: 15),                  labelStyle: const TextStyle(fontSize: 15, fontWeight: FontWeight.w600),                  filled: true,                  focusedBorder: UnderlineInputBorder(                    borderSide: BorderSide(                      color: Theme.of(context).primaryColor,                      width: 2,                    ),                  ),                ),              ),              Expanded(                child: ListView(                  padding: const EdgeInsets.only(top: 10),                  children: [                    ...multiOrdersController.resultList.map((e) {                      return Row(                        crossAxisAlignment: CrossAxisAlignment.start,                        children: [                          Container(                            height: 20,                            alignment: Alignment.center,                            margin: const EdgeInsets.only(top: 5),                            child: Text(                              e["_id"].toString(),                              style: AppCss.h3.copyWith(                                color: Colors.black,                              ),                            ),                          ),                          Expanded(                            child: SelectedOrderAddressCard(                              addressHeder: e["addressHeder"],                              addressDate: e["addressDate"],                              personName: e["personName"],                              address: e["address"],                              vendor: e["vendor"],                              vendorName: e["vendorName"],                              shortNo: e["shortNo"],                              onTap: () {                                e["delete"] = !e["delete"];                                multiOrdersController.update();                              },                              deleteIcon: e["delete"] == true ? Icons.add : Icons.close,                              deleteIconColor: e["delete"] == true ? appController.appTheme.green : Colors.redAccent,                              cardColors: e["delete"] == true ? Colors.red[100] : Colors.white,                            ),                          ),                        ],                      );                    }).toList(),                  ],                ),              ),              multiOrdersController.isOpenOrder == true                  ? commonButton(                      onTap: () {                        multiOrdersController.onMerge();                      },                      text: "Order Merge",                      height: 50.0,                    )                  : Container(),            ],          ),        ),      ),    );  }}