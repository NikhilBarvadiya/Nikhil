// ignore_for_file: deprecated_member_useimport 'dart:io';import 'package:fw_manager/common/config.dart';import 'package:fw_manager/core/utilities/snack_and_dialogs_utils.dart';import 'package:fw_manager/env.dart';import 'package:fw_manager/networking/index.dart';import 'package:get/get.dart';import 'package:package_info_plus/package_info_plus.dart';import 'package:url_launcher/url_launcher.dart';import 'package:version/version.dart';class AppUpdateService {  init() {    updateAlert();  }  updateAlert() async {    PackageInfo packageInfo = await PackageInfo.fromPlatform();    String version1 = packageInfo.version;    String platformType = Platform.isAndroid ? 'android' : 'ios';    await apis.call(apiMethods.appVersion(platformType), null, ApiType.get).then((resData) async {      if (resData.isSuccess == true) {        String version2 = resData.data['application_version_code'];        String version3 = resData.data['application_minimum_version_code'];        bool forceUpdate = resData.data['force_update'];        String description = resData.data['description'];        Version currentVersion = Version.parse(version1);        Version latestVersion = Version.parse(version2);        Version minimumVersion = Version.parse(version3);        if (minimumVersion > currentVersion) {          appUpdateDialog(description, forceUpdate: true, onCancel: cancelAppUpdateDialog, onConfirm: confirmAppUpdate);        } else if (latestVersion > currentVersion) {          appUpdateDialog(description, forceUpdate: forceUpdate, onCancel: cancelAppUpdateDialog, onConfirm: confirmAppUpdate);        }      }    });  }  cancelAppUpdateDialog() {    Get.back();  }  confirmAppUpdate() async {    var playStoreURL = environment['serverConfig']['playStoreURL'];    var appStoreURL = environment['serverConfig']['apiVersion'];    if (Platform.isAndroid) {      await launch(playStoreURL);    } else {      await launch(appStoreURL);    }  }}